This is a class with two methods.

 >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

- Testing area() method:

1. Test case for area() method without implementation:
    >>> geometry = BaseGeometry()
    >>> geometry.area()
    Traceback (most recent call last):
        ...
    Exception: area() is not implemented

- Testing integer_validator() method:

1. Valid integer value:
    >>> geometry = BaseGeometry()
    >>> geometry.integer_validator("Length", 10)

2. Non-integer value:
    >>> geometry = BaseGeometry()
    >>> geometry.integer_validator("Width", 5.5)
    Traceback (most recent call last):
            ...
    TypeError: Width must be an integer

3. Negative integer value:
    >>> geometry = BaseGeometry()
    >>> geometry.integer_validator("Height", -3)
    Traceback (most recent call last):
            ...
    ValueError: Height must be greater than 0

4. Zero value:
    >>> geometry = BaseGeometry()
    >>> geometry.integer_validator("Width", 0)
    Traceback (most recent call last):
            ...
    ValueError: Width must be greater than 0

5. String value:
    >>> geometry = BaseGeometry()
    >>> geometry.integer_validator("Radius", "abc")
    Traceback (most recent call last):
            ...
    TypeError: Radius must be an integer

6. None value:
    >>> geometry = BaseGeometry()
    >>> geometry.integer_validator("Length", None)
    Traceback (most recent call last):
            ...
    TypeError: Length must be an integer

7. Large integer value:
    >>> geometry = BaseGeometry()
    >>> geometry.integer_validator("Length", 99999999999999999999999999999999)

8. Boundary case: Smallest positive integer value:
    >>> geometry = BaseGeometry()
    >>> geometry.integer_validator("Width", 1)

9. Boundary case: Largest positive integer value (within system limits):
    >>> geometry = BaseGeometry()
    >>> geometry.integer_validator("Height", 2147483647)
