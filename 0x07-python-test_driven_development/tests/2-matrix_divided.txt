The ``2-matrix_divided`` module
============================

Using ``matrix_divided``
---------------------

Importing function from the module:

    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided
    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], 2)
    [[0.5, 1.0, 1.5], [2.0, 2.5, 3.0]]

    # Test with a matrix of zeros
    >>> matrix_divided([[0, 0, 0], [0, 0, 0]], 2)
    [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]

    # Test with negative numbers in the matrix
    >>> matrix_divided([[-1, -2, -3], [-4, -5, -6]], 2)
    [[-0.5, -1.0, -1.5], [-2.0, -2.5, -3.0]]

    # Test with a float divisor
    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], 2.5)
    [[0.4, 0.8, 1.2], [1.6, 2.0, 2.4]]

    # Test with a divisor of 1
    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], 1)
    [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]

    # Test with a divisor of 0
    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], 0)
    Traceback (most recent call last):
	            ...
    ZeroDivisionError: division by zero

    # Test with an empty matrix
    >>> matrix_divided([], 2)
    Traceback (most recent call last):
           ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    # Test with a non-matrix input
    >>> matrix_divided("not a matrix", 2)
    Traceback (most recent call last):
	            ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    # Test with a matrix containing non-numeric elements
    >>> matrix_divided([[1, 2, 3], [4, "a", 6]], 2)
    Traceback (most recent call last):
	            ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    # Test with rows of different lengths
    >>> matrix_divided([[1, 2, 3], [4, 5, 6, 7]], 2)
    Traceback (most recent call last):
            ...
    TypeError: Each row of the matrix must have the same size

    # Test with a string divisor
    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], "2")
    Traceback (most recent call last):
            ...
    TypeError: div must be a number
